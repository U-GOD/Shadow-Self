[package]
name = "shadow_self"
version = "0.1.0"
edition = "2024_07"

[dependencies]
starknet = ">=2.12.2"  # Cairo 2.12+ for proofs (like solc ^0.8.20 in foundry.toml)
openzeppelin = { git = "https://github.com/OpenZeppelin/cairo-contracts.git", tag = "v3.0.0-alpha.2" }  # Ownable v3 for internal safety

# [dev-dependencies]  # Comment for MVP build (add for snforge tests in Phase 3, like forge test deps)
# snforge_std = { git = "https://github.com/foundry-rs/starknet-foundry.git", tag = "v0.49.0" }

[[target.starknet-contract]]
sierra = true  # Outputs Sierra for Starknet (ZK bytecode, like Solidity .json artifacts)

[scripts]
test = "snforge test"  # Later: Runs like 'forge test'

[tool.scarb]
allow-prebuilt-plugins = ["snforge_std"]  # For tests

# Visit https://foundry-rs.github.io/starknet-foundry/appendix/scarb-toml.html for more information

# [tool.snforge]                                             # Define `snforge` tool section
# exit_first = true                                          # Stop tests execution immediately upon the first failure
# fuzzer_runs = 1234                                         # Number of runs of the random fuzzer
# fuzzer_seed = 1111                                         # Seed for the random fuzzer

# [[tool.snforge.fork]]                                      # Used for fork testing
# name = "SOME_NAME"                                         # Fork name
# url = "http://your.rpc.url"                                # Url of the RPC provider
# block_id.tag = "latest"                                    # Block to fork from (block tag)

# [[tool.snforge.fork]]
# name = "SOME_SECOND_NAME"
# url = "http://your.second.rpc.url"                         
# block_id.number = "123"                                    # Block to fork from (block number)

# [[tool.snforge.fork]]
# name = "SOME_THIRD_NAME"
# url = "http://your.third.rpc.url"
# block_id.hash = "0x123"                                    # Block to fork from (block hash)

# [profile.dev.cairo]                                        # Configure Cairo compiler
# unstable-add-statements-code-locations-debug-info = true   # Should be used if you want to use coverage
# unstable-add-statements-functions-debug-info = true        # Should be used if you want to use coverage/profiler
# inlining-strategy = "avoid"                                # Should be used if you want to use coverage

# [features]                                                 # Used for conditional compilation
# enable_for_tests = []                                      # Feature name and list of other features that should be enabled with it
